//===-- PatmosISelDAGToDAG.cpp - A dag to dag inst selector for Patmos ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Patmos target.
//
//===----------------------------------------------------------------------===//

#include "Patmos.h"
#include "PatmosTargetMachine.h"
#include "llvm/DerivedTypes.h"
#include "llvm/Function.h"
#include "llvm/Intrinsics.h"
#include "llvm/CallingConv.h"
#include "llvm/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Target/TargetLowering.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;


/// PatmosDAGToDAGISel - Patmos specific code to select Patmos machine
/// instructions for SelectionDAG operations.
///
namespace {
  class PatmosDAGToDAGISel : public SelectionDAGISel {
    const PatmosTargetLowering &Lowering;
    const PatmosSubtarget &Subtarget;

  public:
    PatmosDAGToDAGISel(PatmosTargetMachine &TM)
      : SelectionDAGISel(TM, TM.getOptLevel()),
        Lowering(*TM.getTargetLowering()),
        Subtarget(*TM.getSubtargetImpl()) { }

    virtual const char *getPassName() const {
      return "Patmos DAG->DAG Pattern Instruction Selection";
    }

  // Include the pieces autogenerated from the target description.
  #include "PatmosGenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);
    SDNode *SelectBRCOND(SDNode *N);


    bool SelectPredPReg(SDValue N, SDValue &Reg, SDValue &Inv);
    bool SelectPredPRegInv(SDValue N, SDValue &Reg, SDValue &Inv);
  };
}  // end anonymous namespace

/// createPatmosISelDag - This pass converts a legalized DAG into a
/// Patmos-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createPatmosISelDag(PatmosTargetMachine &TM) {
  return new PatmosDAGToDAGISel(TM);
}



SDNode *PatmosDAGToDAGISel::Select(SDNode *Node) {

  if (Node->isMachineOpcode())
    return NULL;   // Already selected.

  switch (Node->getOpcode()) {
  case ISD::BRCOND:
    //return SelectBRCOND(Node);
  // autogenerated
  default: return SelectCode(Node);
  }

}


// XXX is not used currently, as matching is done by an appropriate pattern
SDNode *PatmosDAGToDAGISel::SelectBRCOND(SDNode *N) {
  assert(N->getNumOperands() >= 3);

  SDValue Chain  = N->getOperand(0);
  SDValue Pred   = N->getOperand(1);
  SDValue Target = N->getOperand(2); // branch target
  SDValue PredInvFlag = CurDAG->getTargetConstant(0, MVT::i1);
  DebugLoc dl = N->getDebugLoc();

  assert(Target.getOpcode()  == ISD::BasicBlock);
  assert(Pred.getValueType() == MVT::i1);

  // Emit BRC
  SDValue Ops[] = { Pred, PredInvFlag, Target, Chain };
  return CurDAG->getMachineNode(Patmos::BC, dl, MVT::Other, Ops, 4);
}


bool PatmosDAGToDAGISel::SelectPredPReg(SDValue N, SDValue &Reg, SDValue &Inv) {
  assert(!dyn_cast<ConstantSDNode>(N.getNode()) && "Unexpected immediate condition!");
  Reg = N;
  Inv = CurDAG->getTargetConstant(0, MVT::i1);
  return true;
}

bool PatmosDAGToDAGISel::SelectPredPRegInv(SDValue N, SDValue &Reg, SDValue &Inv) {
  assert(!dyn_cast<ConstantSDNode>(N.getNode()) && "Unexpected immediate condition!");
  Reg = N;
  Inv = CurDAG->getTargetConstant(1, MVT::i1);
  return true;
}

